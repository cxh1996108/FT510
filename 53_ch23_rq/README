As always, read and understand Chapter 23, then answer these questions
in "answers.txt".

1.  If a hash table with N elements is well designed and implemented
    (i.e., has a good hash function, is appropriately sized, etc),
    then you would expect accesses to it to have what runtime?

    A.  O(1)
    B.  O(lg(N))
    C.  O(N)
    D.  O(N^2)
    E.  None of the above

For the next two questions, consider the following line of code which
has had a typename replaced by TYPE, and a binary operator replaced by
OP:

  TYPE bucket = hash(key) OP num_buckets;

2.  What operator should OP be so that this line of code determines
    the bucket which the key goes into? 

    A.  -
    B.  /
    C.  %
    D.  &
    E.  None of the above

3.  What is the most correct type for TYPE? (Hint: think about what
    you will use the variable 'bucket' for.) 

    A.  const char * 
    B.  int
    C.  unsigned char
    D.  size_t
    E.  ssize_t

4.  If you want to write a generic hash table, you need to accomodate
    a hashing function that depends on the type of key. Which one of
    the following is the best strategy?

    A.  Rely on the existence of a hash function that takes the key.
    B.  Require the keys to have a hash method.
    C.  Have a template parameter for a Hasher class with overloaded
        function operator.
    D.  Write one hash function that works for any type of key.

5.  What is rehashing?

    A.  When you find that a bucket is already occupied, so you
        compute a variant of the hash function to find a new bucket. 
    B.  When the load factor exceeds a threshold, so you increase the
        number of buckets and reinsert all elements. 
    C.  When you determine that your hash function is poor for your
        dataset, so you alter your hash function while the program is
        running. 
    D.  When you compute hash(hash(key)) instead of hash(key).
    E.  None of the above

6.  If you write a program that works with passwords, how should you
    store them? 

    A.  Store the passwords directly.
    B.  Hash the passwords.
    C.  Add pepper to the passwords, then store them.
    D.  Salt the passwords, then hash them. Store the salt and the
        hash. 
    E.  None of the above

7.  How good or bad is this hash function for strings?

  unsigned hash(const std::string & str) {
    unsigned ans = 0;
    for (std::string::const iterator it=str.begin();
         it!=str.end(); 
         ++it) {
      ans += * it;
    }
    return ans ;
  }

    A.  It is not a valid hash function.
    B.  It is valid, but not a good choice.
    C.  It is valid, and is decent, but not great.
    D.  It is a good hash function.
    E.  It is a cryptographically secure hash function.

8.  What is external chaining?

    A.  A collision resolution scheme in which a fixed ammount is
        added to the bucket number until an empty bucket is found.
    B.  A collision resolution scheme in which an increasing ammount
        is added to the bucket number until an empty bucket is found.
    C.  A collision resolution scheme in which linked lists are used
        to hold all colliding elements in a bucket. 
    D.  A colliding resolution scheme in which the element being
        collided with is removed. 
    E.  None of the above

9.  Why would a binary search tree not be an improvement over a linked
    list for implementing chaining?

    A.  You could not ensure that the tree remains balanced.
    B.  The data structure used for chaining needs O(N) access time
        for each bucket.
    C.  The bucket might have more than two choices.
    D.  There would not be enough elements in that bucket for the big
        O to be significant.
    E.  None of the above

10. What is linear probing?

    A.  A collision resolution scheme in which a fixed ammount is
        added to the bucket number until an empty bucket is found.
    B.  A collision resolution scheme in which an increasing ammount
        is added to the bucket number until an empty bucket is found. 
    C.  A collision resolution scheme in which linked lists are used
        to hold all colliding elements in a bucket. 
    D.  A colliding resolution scheme in which the element being
        collided with is removed. 
    E.  None of the above
